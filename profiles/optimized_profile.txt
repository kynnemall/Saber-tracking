Timer unit: 1e-06 s

Total time: 8.80957 s
File: /tmp/ipykernel_20334/2821257405.py
Function: optimized at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           def optimized(fname, save_video=False, savename=None, show_video=False, save_stats=False,
    12                                                               frame_limit=False):
    13         1          2.0      2.0      0.0      if savename == None:
    14                                                   savename = "saber_tracking.avi"
    15                                           
    16         1          2.0      2.0      0.0      if save_video:
    17                                                   # Initialize video writer to save the results
    18         2       2531.0   1265.5      0.0          out = cv2.VideoWriter(savename, cv2.VideoWriter_fourcc(*'XVID'), 30.0, 
    19         1          1.0      1.0      0.0                                   (WIDTH, WIDTH), True)
    20                                           
    21         1      21765.0  21765.0      0.2      cap = cv2.VideoCapture(fname)
    22         1      14221.0  14221.0      0.2      ret, frame = cap.read()
    23         1          4.0      4.0      0.0      total_frames = 500 if frame_limit else int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    24         1       1935.0   1935.0      0.0      pbar = tqdm(total=total_frames)
    25         1          3.0      3.0      0.0      frame_num = 0
    26                                           
    27         1          3.0      3.0      0.0      output_path = savename.replace(".avi", "_data.csv")
    28                                               # prevent appending to existing file
    29         1         44.0     44.0      0.0      if os.path.exists(output_path):
    30         1        192.0    192.0      0.0          os.remove(output_path)
    31         2          4.0      2.0      0.0      data = {"frame" : [],
    32         1          1.0      1.0      0.0              "centroid_x" : [],
    33         1          1.0      1.0      0.0              "centroid_y" : [],
    34         1          1.0      1.0      0.0              "angle" : [],
    35         1          1.0      1.0      0.0              "length" : []}
    36                                           
    37                                               # instantiate DBSCAN for use throughout
    38                                               # n_jobs parallelisation introduces too much overhead
    39         1         15.0     15.0      0.0      db = DBSCAN(eps=5, min_samples=2)
    40                                           
    41       500        593.0      1.2      0.0      while ret:
    42       500     500869.0   1001.7      5.7          ret, frame = cap.read()
    43       500     132769.0    265.5      1.5          frame = cv2.resize(frame, (frame.shape[1] // 2, frame.shape[0] // 2))
    44                                                   # these channels were swapped in the notebook
    45       500      85052.0    170.1      1.0          b = cv2.inRange(frame[:, :, 2], 200, 255)
    46       500      70450.0    140.9      0.8          r = cv2.inRange(frame[:, :, 0], 180, 255)
    47                                           
    48                                                   # convert to HSV for more masking options
    49       500      65490.0    131.0      0.7          hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    50       500      71781.0    143.6      0.8          v = cv2.inRange(hsv[:, :, 2], 170, 255)
    51       500      68906.0    137.8      0.8          s = cv2.inRange(hsv[:, :, 1], 140, 175)
    52                                           
    53                                                   # combine masks into one
    54       500      18599.0     37.2      0.2          m1 = cv2.bitwise_and(b, s)
    55       500      26193.0     52.4      0.3          m2 = cv2.bitwise_and(r, v)
    56       500      17335.0     34.7      0.2          mask = cv2.bitwise_or(m1, m2)
    57                                           
    58                                                   # Run Hough on masked image
    59                                                   # Output "lines" is an array containing endpoints of detected line segments
    60       500     849062.0   1698.1      9.6          lines = cv2.HoughLinesP(mask, RHO, THETA, THRESHOLD, np.array([]), MIN_LINE_LENGTH, MAX_LINE_GAP)
    61                                           
    62                                                   # process lines
    63       500       2514.0      5.0      0.0          if isinstance(lines, np.ndarray):
    64     50280      66142.0      1.3      0.8              for line in lines:
    65     49780     129519.0      2.6      1.5                  x1, y1, x2, y2 = line.ravel()
    66     49780     273777.0      5.5      3.1                  centroid = (int((x1 + x2) / 2), int((y1 + y2) / 2))
    67     49780      59126.0      1.2      0.7                  x_diff = x1 - x2
    68     49780      56755.0      1.1      0.6                  y_diff = y1 - y2
    69     49780     149556.0      3.0      1.7                  length = (x_diff * x_diff + y_diff * y_diff) ** 0.5
    70     49780      64491.0      1.3      0.7                  edge_x = 100 < centroid[0] < 540
    71     49780      59618.0      1.2      0.7                  edge_y = 50 < centroid[1] < 310
    72     49780      64383.0      1.3      0.7                  l = 50 > length > 10
    73     49780      56760.0      1.1      0.6                  if l and edge_x and edge_y: # length of 25 or 30
    74     11206      37787.0      3.4      0.4                      degrees = np.rad2deg(np.arctan(y_diff / x_diff))
    75     11206      16370.0      1.5      0.2                      data["frame"].append(frame_num)
    76     11206      14682.0      1.3      0.2                      data["centroid_x"].append(centroid[0])
    77     11206      14377.0      1.3      0.2                      data["centroid_y"].append(centroid[1])
    78     11206      13638.0      1.2      0.2                      data["angle"].append(degrees)
    79     11206      14009.0      1.3      0.2                      data["length"].append(length)
    80                                           
    81                                                   # perform clustering to reduce data
    82       500     413601.0    827.2      4.7          df = pd.DataFrame(data)
    83       500       3342.0      6.7      0.0          if df.shape[0] > 0:
    84       500    1094368.0   2188.7     12.4              df["labels"] = db.fit(df[["centroid_x", "centroid_y", "angle"]].values).labels_
    85       500     609043.0   1218.1      6.9              df = df[(df != -1).all(axis=1)]
    86       500       2375.0      4.8      0.0              if df.shape[0] > 0:
    87       450    1173975.0   2608.8     13.3                  df = df.groupby("labels", as_index=False, sort=False).mean()
    88      1558      99857.0     64.1      1.1                  for cx, cy in zip(df["centroid_x"], df["centroid_y"]):
    89      1108      12241.0     11.0      0.1                      cv2.drawMarker(frame, (int(cx), int(cy)), (0, 255, 0), markerType=cv2.MARKER_CROSS, thickness=2)
    90                                           
    91       500        607.0      1.2      0.0          if save_stats:
    92      1000     360735.0    360.7      4.1              df.to_csv(output_path, index=False, mode='a',
    93       500       8244.0     16.5      0.1                          header=not os.path.exists(output_path))
    94                                                       
    95                                                       # reset data structure
    96      1000       2651.0      2.7      0.0              data = {"frame" : [],
    97       500        569.0      1.1      0.0                      "centroid_x" : [],
    98       500        574.0      1.1      0.0                      "centroid_y" : [],
    99       500        542.0      1.1      0.0                      "angle" : [],
   100       500        562.0      1.1      0.0                      "length" : []}
   101                                           
   102       500     185229.0    370.5      2.1          resized = cv2.resize(frame, (WIDTH, WIDTH))
   103                                                   
   104       500       1337.0      2.7      0.0          if show_video:
   105                                                       cv2.imshow("Frame", frame)
   106       500        873.0      1.7      0.0          if save_video:
   107       500    1701519.0   3403.0     19.3              out.write(resized)
   108       500       2343.0      4.7      0.0          frame_num += 1
   109       500      85150.0    170.3      1.0          pbar.update(1)
   110                                           
   111       500       4299.0      8.6      0.0          key = cv2.waitKey(1)
   112       500       1228.0      2.5      0.0          if key == ord('q'):
   113                                                       break
   114       500        657.0      1.3      0.0          if key == ord('p'):
   115                                                       cv2.waitKey(-1) # wait until any key is pressed
   116       500        682.0      1.4      0.0          if frame_limit and frame_num == 500:
   117         1          1.0      1.0      0.0              break
   118                                           
   119         1       1425.0   1425.0      0.0      cap.release()
   120         1          2.0      2.0      0.0      if save_video:
   121         1        204.0    204.0      0.0          out.release()
   122         1          2.0      2.0      0.0      if show_video:
   123                                                   cv2.destroyAllWindows()
