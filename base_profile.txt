Timer unit: 1e-06 s

Total time: 17.8272 s
File: /tmp/ipykernel_20645/4157736195.py
Function: process_video at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                           def process_video(fname, save_video=False, savename=None, show_video=False, save_stats=False,
    13                                                               frame_limit=False):
    14         1          2.0      2.0      0.0      if savename == None:
    15                                                   savename = "saber_tracking.avi"
    16                                           
    17         1          2.0      2.0      0.0      if save_video:
    18                                                   # Initialize video writer to save the results
    19         2      14195.0   7097.5      0.1          out = cv2.VideoWriter(savename, cv2.VideoWriter_fourcc(*'XVID'), 30.0, 
    20         1          2.0      2.0      0.0                                   (WIDTH, WIDTH), True)
    21                                           
    22         1      29548.0  29548.0      0.2      cap = cv2.VideoCapture(fname)
    23         1      17036.0  17036.0      0.1      ret, frame = cap.read()
    24         1          3.0      3.0      0.0      total_frames = 500 if frame_limit else int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    25         1       1589.0   1589.0      0.0      pbar = tqdm(total=total_frames)
    26         1          2.0      2.0      0.0      frame_num = 0
    27                                           
    28         1          2.0      2.0      0.0      output_path = savename.replace(".avi", "_data.parquet")
    29         2          3.0      1.5      0.0      data = {"frame" : [],
    30         1          1.0      1.0      0.0              "centroid_x" : [],
    31         1          1.0      1.0      0.0              "centroid_y" : [],
    32         1          1.0      1.0      0.0              "angle" : [],
    33         1          1.0      1.0      0.0              "length" : []}
    34                                           
    35                                               # instantiate DBSCAN for use throughout
    36                                               # n_jobs parallelisation introduces too much overhead
    37         1          8.0      8.0      0.0      db = DBSCAN(eps=5, min_samples=2)
    38                                           
    39       500        592.0      1.2      0.0      while ret:
    40       500     480317.0    960.6      2.7          ret, frame = cap.read()
    41                                                   # these channels were swapped in the notebook
    42       500     966886.0   1933.8      5.4          b = (frame[:, :, 2] > 200).astype(int)
    43       500     864079.0   1728.2      4.8          r = (frame[:, :, 0] > 220).astype(int)
    44                                           
    45                                                   # convert to HSV for more masking options
    46       500     256688.0    513.4      1.4          hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    47       500     969207.0   1938.4      5.4          v = (hsv[:, :, 2] > 210).astype(int)
    48       500     261458.0    522.9      1.5          s = cv2.inRange(hsv[:, :, 1],  140, 175)
    49                                           
    50                                                   # combine masks into one
    51       500     386352.0    772.7      2.2          m1 = np.logical_and(b, s)
    52       500     430342.0    860.7      2.4          m2 = np.logical_and(r, v)
    53       500     159786.0    319.6      0.9          mask = (m1 + m2).astype(np.uint8)
    54                                           
    55                                                   # Run Hough on edge detected image
    56                                                   # Output "lines" is an array containing endpoints of detected line segments
    57       500    2647087.0   5294.2     14.8          lines = cv2.HoughLinesP(mask, rho, theta, threshold, np.array([]), min_line_length, max_line_gap)
    58                                           
    59                                                   # process lines
    60       500       2461.0      4.9      0.0          if isinstance(lines, np.ndarray):
    61     41762      51267.0      1.2      0.3              for line in lines:
    62     41262     102579.0      2.5      0.6                  x1, y1, x2, y2 = line.ravel()                   
    63     41262     217064.0      5.3      1.2                  centroid = (int((x1 + x2) / 2), int((y1 + y2) / 2))
    64     41262      46761.0      1.1      0.3                  x_diff = x1 - x2
    65     41262      43948.0      1.1      0.2                  y_diff = y1 - y2
    66     41262     118927.0      2.9      0.7                  length = (x_diff * x_diff + y_diff * y_diff) ** 0.5
    67     41262      50157.0      1.2      0.3                  edge_x = 200 < centroid[0] < 1080
    68     41262      46589.0      1.1      0.3                  edge_y = 100 < centroid[1] < 620
    69     41262      51107.0      1.2      0.3                  if 100 > length > 30 and edge_x and edge_y: # length of 25 or 30
    70     12746      40404.0      3.2      0.2                      degrees = np.rad2deg(np.arctan(y_diff / x_diff))
    71     12746      17563.0      1.4      0.1                      data["frame"].append(frame_num)
    72     12746      15569.0      1.2      0.1                      data["centroid_x"].append(centroid[0])
    73     12746      15212.0      1.2      0.1                      data["centroid_y"].append(centroid[1])
    74     12746      14565.0      1.1      0.1                      data["angle"].append(degrees)
    75     12746      14542.0      1.1      0.1                      data["length"].append(length)
    76                                           
    77                                                   # perform clustering to reduce data
    78       500     414455.0    828.9      2.3          df = pd.DataFrame(data)
    79       500       3630.0      7.3      0.0          if df.shape[0] > 0:
    80       500    1867477.0   3735.0     10.5              db.fit(df[["centroid_x", "centroid_y", "angle"]])
    81       500     332196.0    664.4      1.9              df["labels"] = db.labels_
    82       500    1824268.0   3648.5     10.2              df = df.query("labels != -1")
    83       500       2610.0      5.2      0.0              if df.shape[0] > 0:
    84       453    1853695.0   4092.0     10.4                  df = df.groupby(["frame", "labels"], as_index=False)[["centroid_x", "centroid_y", "angle"]].mean()
    85      1723     303805.0    176.3      1.7                  for centroid in df[["centroid_x", "centroid_y"]].values:
    86      1270      15664.0     12.3      0.1                      cv2.drawMarker(frame, centroid.astype(int), (0, 255, 0), markerType=cv2.MARKER_CROSS, thickness=2)
    87                                           
    88       500        606.0      1.2      0.0          if save_stats:
    89                                                       # Create a parquet table from your dataframe
    90       500     462931.0    925.9      2.6              table = pa.Table.from_pandas(df)
    91                                           
    92                                                       # Write direct to your parquet file
    93       500     335163.0    670.3      1.9              pq.write_to_dataset(table, root_path=output_path)
    94                                                       
    95                                                       # reset data structure
    96      1000       1818.0      1.8      0.0              data = {"frame" : [],
    97       500        570.0      1.1      0.0                      "centroid_x" : [],
    98       500        537.0      1.1      0.0                      "centroid_y" : [],
    99       500        514.0      1.0      0.0                      "angle" : [],
   100       500        530.0      1.1      0.0                      "length" : []}
   101                                           
   102       500     228750.0    457.5      1.3          resized = resize(frame)
   103                                                   
   104       500       1287.0      2.6      0.0          if show_video:
   105                                                       cv2.imshow("Frame", resized)
   106       500        759.0      1.5      0.0          if save_video:
   107       500    1682201.0   3364.4      9.4              out.write(resized)
   108       500       1831.0      3.7      0.0          frame_num += 1
   109       500     143171.0    286.3      0.8          pbar.update(1)
   110                                           
   111       500       4355.0      8.7      0.0          key = cv2.waitKey(1)
   112       500        965.0      1.9      0.0          if key == ord('q'):
   113                                                       break
   114       500        565.0      1.1      0.0          if key == ord('p'):
   115                                                       cv2.waitKey(-1) # wait until any key is pressed
   116       500        591.0      1.2      0.0          if frame_limit and frame_num == 500:
   117         1          2.0      2.0      0.0              break
   118                                           
   119         1       8164.0   8164.0      0.0      cap.release()
   120         1          3.0      3.0      0.0      if save_video:
   121         1        179.0    179.0      0.0          out.release()
   122         1          2.0      2.0      0.0      if show_video:
   123                                                   cv2.destroyAllWindows()
